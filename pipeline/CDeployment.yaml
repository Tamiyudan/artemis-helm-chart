env:
  region:             "us-central1"
  app_name:           "artemis"
  project_id:         "${{ secrets.PROJECT_ID }}"
  repository:         "us-central1-docker.pkg.dev/${{ secrets.PROJECT_ID }}/artemis/artemis"
  app_version:        ${GITHUB_SHA}
  app_port:           "5000"
  cluster_name:       "project-cluster"
  helm_repository:    "https://github.com/sanyoc/artemis-helm-chart"
  google_domain_name: "${{ secrets.GOOGLE_DOMAIN_NAME }}"
  environment:        "prod"
  github_username:    "sanyoc"


name: ContinuousDeployment

# Controls when the workflow will run
on:
  # Triggers the workflow only when workflow "ContinuousDelivery" is completed successuful 
  workflow_run:
    workflows: ["ContinuousDelivery"]
    types:
      - completed
  
  # Allows you to run this workflow manually from the Actions tab     
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "deploy"
  deploy:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest


    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      
      # Clone Helm Chart Repository
      - name: Clone Helm Chart Repository
        run: |
          git clone "${{ env.helm_repository }}"
          
      # Creates an environment variable    
      - name: Set the value for work_dir variable
        run: echo "work_dir=$(echo ${{ env.helm_repository }} | awk -F '/' '{ print $NF }')" >> $GITHUB_ENV
      
      # Authenticate to Google Cloud Platform 
      - id: 'auth'
        name: 'Authenticate to Google Cloud Platform'
        uses: 'google-github-actions/auth@v0.4.0'
        with:
          credentials_json: '${{ secrets.SERVICE_ACCOUNT }}'
        
      - id: 'get-credentials'
        uses: 'google-github-actions/get-gke-credentials@v1'
        with:
          cluster_name: 'project-cluster'
          location: 'us-central1'

      # The KUBECONFIG env var is automatically exported and picked up by kubectl.
      - id: 'kubeconfig'
        run: 'mkdir ~/.kube && cat $KUBECONFIG > ~/.kube/config'

      # Configure Backend and Initialize
      - name: Configure Backend
        working-directory: "${{ env.work_dir }}"
        run: |
          bash setenv.sh
          
      # Create terraform workspace
      - name: Create workspace
        working-directory: "${{ env.work_dir }}"
        run: |
          terraform workspace  select  ${{ env.environment }}   ||  terraform workspace  new  ${{ env.environment }}
      
      # Deploy the Application
      - name: Deploy the Application
        working-directory: "${{ env.work_dir }}"
        run: |
          terraform apply   \
          -var app_name="${{ env.app_name }}"   \
          -var app_version="${{ env.app_version }}"   \
          -var app_port="${{ env.app_port }}"   \
          -var google_domain_name="${{ env.google_domain_name }}"   \
          -var region="${{ env.region }}"   \
          -var project_id="${{ secrets.PROJECT_ID }}"   \
          -var environment="${{ env.environment }}"   \
          -var repository="${{ env.repository }}"   \
          -var email="${{ secrets.EMAIL }}"   \
          --auto-approve
      